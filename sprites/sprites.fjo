output_type_STANDARD = 0;
output_type_C64 = 1;
output_type_PICO8 = 2;
output_type_VGA = 3;
output_type_BINARY = 4;
output_type_GAMEBOY = 5;
output_type_AMSTRAD = 6;
output_type_CHARSET = 7;
output_type_CGA = 8;

c64_type_charset = 0
c64_type_multicolor = 1


-- Set number of frames
noFrames = 128



globals = {

	-- camera will be overwritten, so no worry there
	
 	camera = { x = 9, y=0, z=0 },
 	
 	-- field of view
 	
    fov = 70,
     
     -- target: look at center
     
	target = { x = 0, y=0.0, z=0 },
	
	-- light will be changed for each frame
	light0 = {  direction = {x=1, y=0.8, z=-0.2 }, 
				color = {x=1, y=1, z=1}, 
			},
	-- add some ambient background colors
	ambient = { x = 0.3, y = 0.3, z = 0.3 },
     
     -- define the "up" vector
     
 	up = { x = 0, y=1, z=0 },
	-- ray tracing settings 
	
    -- nymber of ray steps. higher is better, but lower performance 	
    raymarch_steps = 60,
    -- shadow raymarching steps
	raymarch_shadow_steps = 30,
	-- background sky - between 0 and 1
	sky = 0,
	-- shadow multiplication scale 0-1
	shadow_scale = 0.5,
	isPaused = 0	

}

output = {
	-- resolution. Typical resolutions:
	-- c64 sprite (non multicolor): 24 x 21
	-- c64 sprite (multicolor): 12 x 21
	-- c64 multicolor image : 160x200
	-- Amiga 500 : 320x256
	
	resolution = { width = 160, height=100},
-- to view the scene properly, render with higher resolution
--	resolution = { width = 128, height=128},
	
	-- Allow for dithering (2)	
	-- dither 0 = off, dither 1 = floyd steinberg, dither 2 = ordered dithering with
	-- parameters specified in ditherstrength
	dither = 2,
	-- set dither strength 30
	ditherStrength= {x=30, y=1, z=2},
	
	-- Enable c64 output
	--[[
	      

   _____                                        _               _   
  / ____|                                      | |             | |  
 | (___   ___ _ __ ___  ___ _ __     ___  _   _| |_ _ __  _   _| |_ 
  \___ \ / __| '__/ _ \/ _ \ '_ \   / _ \| | | | __| '_ \| | | | __|
  ____) | (__| | |  __/  __/ | | | | (_) | |_| | |_| |_) | |_| | |_ 
 |_____/ \___|_|  \___|\___|_| |_|  \___/ \__,_|\__| .__/ \__,_|\__|
                                                   | |
							                      |_|              
							                      
          change output_type to suit your needs (see the list at the top)                                               	
	]]--
	
	-- define output type
	
	output_type = output_type_STANDARD, 
	
	
	
	
	-- aspect ration
    aspect = 1,
     -- 
	c64_imageType = c64_type_charset, -- 0 = character set (4 colors, compressable), 1 = multicolor image 
	-- turn on c64 multicolors
	c64_multicolor = 1,
	-- Define 4 colors (black, purple, blue, white)
	index_colors = { 0,4,6,1 }

}

-- Two materials in this scene: a regular one and a black one
Material0 = {
   color = { x=1, y=1.0, z=1 },
	reflection = 0.5,
	shininess = 50,
	shininess_intensity = 0.7 
}

MaterialBlack = {
   color = { x=0, y=0.0, z=0 },
	reflection = 0.5,
	shininess = 50,
	shininess_intensity = 1 
}


frame = 0
hasSaved = 0

function Init()
	-- Create a box with a smaller box surround it
	size = 3.3
	-- press "F1" on "Addobject" to get a list of the support object types + parameters
	AddObject("box","object1","","Material0",0,0,0,  size,size,size);
	AddObject("box","object2","","MaterialBlack",0,0,0,  size*1.2,size/8.0,size*1.2);

	
	UpdateScene()
	Message("Rendering.. please wait")
end



function UpdateScene()
	
  	t = ((frame)/noFrames)
	-- Convert from (0,1) -> angles (0,360)
	j=t*360
	-- Rotate both objects
	SetRotation("object1",0,j+90,j)
	SetRotation("object2",0,j+90,j)

end


function Update()
	-- For each frame, add a new 64 byte sprite to the internal buffer	
	if (hasSaved == 0) then 
		if (output.resolution.height == 21) then
		-- if high = 21, then assume we are dealing with a c64 sprite... 		
		-- Add raw data starting at (0,0) to bytes (3,21) = 3*21=63 bytes of data (size of a sprite)
			AddC64LineToData(0,0,3,21)
			AddC64LineToData(0,0,1,1) -- add a random single byte to fill up to 64 bytes
		end;
	end
	-- increase frame count
	frame=frame+1
	-- if final frame has been reached
	if (frame==noFrames) then 
		hasSaved = 1
		
		-- save the noFrames*48 bytes of data as raw data
		SaveRawData("data.bin");
		
		Message("Data saved to disk.")
		
	end	
	-- Update scene again
	UpdateScene()

end
