procedure ReleaseKeys(id: byte);

begin
	objectList[id].b_controlPressLeft := false;
	objectList[id].b_controlPressRight := false;
	objectList[id].b_controlPressDown := false;			
	objectList[id].b_controlPressUp := false;
end;

procedure ProcessBackObj(id: byte);
var
	defWalk: boolean;
	gravity: byte;
	backObj, backObj2: byte;
	pos,v: byte;
	robeAbleId, portalId, gravPadId: byte;
	newx, newy: byte;
begin
	defWalk := true;
	
	if(objectList[id].controlHasMoved = true) then begin
	
		robeAbleId := GetObjectByPosFilterComp(objectList[id].transX, objectList[id].transY, @Z_BACK1, @COMP_ROBE_ABLE_1, 1);
		portalId := GetObjectByPosFilterComp(objectList[id].transX, objectList[id].transY, @Z_BACK1, @COMP_PORTAL_1, 1);
		gravPadId := GetObjectByPosFilterComp(objectList[id].transX, objectList[id].transY, @Z_BACK1, @COMP_GRAVPAD_1, 1);
		
		if(GetObjectByPosFilterComp(objectList[id].transX, objectList[id].transY, @Z_BACK1, @COMP_CLIMB_ABLE_1, 1) <> $FF) then begin	
			objectList[id].b_physFallDown := false;
			// TODO:Anim Swim
			objectList[id].controlState := @CTRL_STATE_CLIMB;
			defWalk := false;
		end
		else if(robeAbleId <> $FF) then begin	
			if (objectList[robeAbleId].physGravity = objectList[id].physGravity) then begin
				objectList[id].b_physFallDown := false;
				objectList[id].controlState := @CTRL_STATE_ROBE;
				defWalk := false;
			end;
		end
		else if(portalId <> $FF and objectList[id].controlLastPortal <> portalId) then begin
			newx := $FF;
			newy := $FF;
			if(portals[0] <> $FF and portals[1] <> $FF) then begin
				if(portals[0] = portalId) then begin
					newx := objectList[portals[1]].transX;
					newy := objectList[portals[1]].transY;
					objectList[id].controlLastPortal := portalId;
				end
				else if(portals[1] = portalId) then begin
					newx := objectList[portals[0]].transX;
					newy := objectList[portals[0]].transY;
					objectList[id].controlLastPortal := portalId;
				end;
			end;
			if(newx <> $FF) then SetPos(id, objectList[id].transX, objectList[id].transY, newx, newy, objectList[id].transZ);
			defWalk := true;
		end
		else if(GetObjectByPosFilterComp(objectList[id].transX, objectList[id].transY, @Z_BACK2, @COMP_WATER_0, 0) <> $FF) then begin	
			if(objectList[id].component1 & @COMP_FLOATER_1 = @COMP_FLOATER_1) then begin
				objectList[id].b_physFallDown := false;
				// TODO:Anim Swim
				objectList[id].controlState := @CTRL_STATE_SWIM;
				defWalk := false;
			end
		end
		else if(gravPadId <> $FF) then begin
			objectList[id].physGravity := objectList[gravPadId].physGravity;
		end;
		
		if(defWalk = true) then begin 
			if(objectList[id].controlState <> @CTRL_STATE_JUMP) then	begin 
				objectList[id].controlState := @CTRL_STATE_WALK;
 				objectList[id].b_physFallDown := true;
 			end;
		end;
		
		if(portalId = $FF) then objectList[id].controlLastPortal := $FF;
		// objectList[id].controlHasMoved := false;
	end;
end;

procedure InputControl(id: byte);
var
	gravity: byte;
begin
	ReleaseKeys(id);
	if(objectList[id].component0 & @COMP_PHYSICS_0 = @COMP_PHYSICS_0) then gravity := objectList[id].physGravity else gravity := @DOWN ;
	if(joy2 & joy_fire = joy_fire) then ReleaseKeys(id)
	else begin
		if(joy2 & joy_left = joy_left) then begin
			if(gravity = @DOWN) then objectList[id].b_controlPressLeft := true;
			if(gravity = @UP) then objectList[id].b_controlPressRight := true;
			if(gravity = @LEFT) then objectList[id].b_controlPressDown := true;			
			if(gravity = @RIGHT) then objectList[id].b_controlPressUp := true;			
		end;
		if(joy2 & joy_left <> joy_left) then begin
			if(gravity = @DOWN) then objectList[id].b_controlPressLeft := false;
			if(gravity = @UP) then objectList[id].b_controlPressRight := false;
			if(gravity = @LEFT) then objectList[id].b_controlPressDown := false;			
			if(gravity = @RIGHT) then objectList[id].b_controlPressUp := false;			
		end;
		if(joy2 & joy_right) then begin
			if(gravity = @DOWN) then objectList[id].b_controlPressRight := true;
			if(gravity = @UP) then objectList[id].b_controlPressLeft := true;
			if(gravity = @LEFT) then objectList[id].b_controlPressUp := true;			
			if(gravity = @RIGHT) then objectList[id].b_controlPressDown := true;
		end;
		if(joy2 & joy_right <> joy_right) then begin
			if(gravity = @DOWN) then objectList[id].b_controlPressRight := false;
			if(gravity = @UP) then objectList[id].b_controlPressLeft := false;
			if(gravity = @LEFT) then objectList[id].b_controlPressUp := false;			
			if(gravity = @RIGHT) then objectList[id].b_controlPressDown := false;			
		end;
		if(joy2 & joy_up = joy_up) then begin
			if(gravity = @DOWN) then objectList[id].b_controlPressUp := true;
			if(gravity = @UP) then objectList[id].b_controlPressDown := true;
			if(gravity = @LEFT) then objectList[id].b_controlPressLeft := true;			
			if(gravity = @RIGHT) then objectList[id].b_controlPressRight := true;
		end;
		if(joy2 & joy_up <> joy_up) then begin
			if(gravity = @DOWN) then objectList[id].b_controlPressUp := false;
			if(gravity = @UP) then objectList[id].b_controlPressDown := false;
			if(gravity = @LEFT) then objectList[id].b_controlPressLeft := false;			
			if(gravity = @RIGHT) then objectList[id].b_controlPressRight := false;
		end;
		if(joy2 & joy_down = joy_down) then begin
			if(gravity = @DOWN) then objectList[id].b_controlPressDown := true;
			if(gravity = @UP) then objectList[id].b_controlPressUp := true;
			if(gravity = @LEFT) then objectList[id].b_controlPressRight := true;			
			if(gravity = @RIGHT) then objectList[id].b_controlPressLeft := true;
		end;
		if(joy2 & joy_down <> joy_down) then begin
			if(gravity = @DOWN) then objectList[id].b_controlPressDown := false;
			if(gravity = @UP) then objectList[id].b_controlPressUp := false;
			if(gravity = @LEFT) then objectList[id].b_controlPressRight := false;			
			if(gravity = @RIGHT) then objectList[id].b_controlPressLeft := false;
		end;
	end;
end;

procedure UpdateControl(id: byte);
var
	grounded: boolean;
	isShift: boolean;
	gravity: byte;
	oldx, oldy, newx, newy, moveDir: byte; 

	shift: integer;
	d: byte;

	colObj, eraseObj, colObj2, eraseObj2: byte;
	shiftDir: byte;
begin
	moveDir := $FF;
	grounded := false;
	isShift := false;
	shift := 0;
	shiftDir := $FF;
	gravity := $FF;
	newx := $FF;
	newy := $FF;
	
	if(objectList[id].component0 & @COMP_PHYSICS_0 <> @COMP_PHYSICS_0) then begin
		grounded := true;
		isShift := false;
		gravity := @DOWN;
	end
	else begin
		gravity := objectList[id].physGravity;
		colObj := GetObjArea(id, objectList[id].transZ, 7, @COMP_COLLIDE_ABLE_0,0, false);
		if(colObj <> $FF) then begin 
			grounded := true;
			shiftDir := objectList[colObj].shiftDir;
			if ((gravity = @DOWN and shiftDir = @LEFT) or (gravity = @DOWN and shiftDir = @RIGHT)) then isShift:= true;
			if ((gravity = @LEFT and shiftDir = @LEFT) or (gravity = @LEFT and shiftDir = @RIGHT)) then isShift:= true; 
			if ((gravity = @UP and shiftDir = @LEFT) or  (gravity = @UP and shiftDir = @RIGHT)) then isShift:= true;
			if ((gravity = @RIGHT and shiftDir = @LEFT) or (gravity = @RIGHT and shiftDir = @RIGHT)) then isShift := true;
		end;
	end;

	if(objectList[id].controlState = @CTRL_STATE_WALK) then begin
		if(isShift = false) then begin
			colObj := GetObjArea(id, objectList[id].transZ, 3, @COMP_DESTROY_COLLIDE_0,0, false);
			if((colObj <> $FF and objectList[id].b_controlPressLeft = true) and (objectList[id].b_controlPressUp = false and grounded = true)) then DamageCollide(colObj);
			
			colObj := GetObjArea(id, objectList[id].transZ, 5, @COMP_DESTROY_COLLIDE_0,0, false);
			if((colObj <> $FF and objectList[id].b_controlPressRight = true) and (objectList[id].b_controlPressUp = false and grounded = true)) then DamageCollide(colObj);
			
			colObj := GetObjArea(id, objectList[id].transZ, 7, @COMP_DESTROY_COLLIDE_0,0, false);
			if((colObj <> $FF and objectList[id].b_controlPressDown = true) and grounded = true) then DamageCollide(colObj);
			
			colObj := GetObjArea(id, objectList[id].transZ, 3, @COMP_COLLIDE_ABLE_0,0, false);
			eraseObj := GetObjArea(id, objectList[id].transZ, 3, @COMP_ERASE_ABLE_0,0, false);
			if((colObj = $FF or eraseObj <> $FF) and ((objectList[id].b_controlPressUp = false and objectList[id].b_controlPressLeft = true) and (grounded = true))) then moveDir := @LEFT;  //TODO: AnimationWalkL
		
			colObj := GetObjArea(id, objectList[id].transZ, 5, @COMP_COLLIDE_ABLE_0,0, false);
			eraseObj := GetObjArea(id, objectList[id].transZ, 5, @COMP_ERASE_ABLE_0,0, false);
			if((colObj = $FF or eraseObj <> $FF) and (objectList[id].b_controlPressRight = true and grounded = true)) then moveDir := @RIGHT;  //TODO: AnimationWalkR
						
			if(moveDir = $FF) then begin
				colObj := GetObjArea(id, objectList[id].transZ, 1, @COMP_COLLIDE_ABLE_0,0, false);
				eraseObj := GetObjArea(id, objectList[id].transZ, 1, @COMP_ERASE_ABLE_0,0, false);
				colObj2 := GetObjArea(id, objectList[id].transZ, 0, @COMP_COLLIDE_ABLE_0,0, false);
				eraseObj2 := GetObjArea(id, objectList[id].transZ, 0, @COMP_ERASE_ABLE_0,0, false);
				if((colObj = $FF or eraseObj <> $FF) and (colObj2 = $FF or eraseObj2 <> $FF)) then begin
					if(objectList[id].b_controlPressLeft = true or objectList[id].controlFollowKeyLeft = true) then begin
						if(grounded = true) then begin 
							moveDir := @UP_LEFT;
							objectList[id].controlFollowKeyLeft := false;
						end;
					end;
				end; 
				colObj := GetObjArea(id, objectList[id].transZ, 1, @COMP_COLLIDE_ABLE_0,0, false);
				eraseObj := GetObjArea(id, objectList[id].transZ, 1, @COMP_ERASE_ABLE_0,0, false);
				colObj2 := GetObjArea(id, objectList[id].transZ, 2, @COMP_COLLIDE_ABLE_0,0, false);
				eraseObj2 := GetObjArea(id, objectList[id].transZ, 2, @COMP_ERASE_ABLE_0,0, false);
				if((colObj = $FF or eraseObj <> $FF) and (colObj2 = $FF or eraseObj2 <> $FF)) then begin
					if(objectList[id].b_controlPressRight = true or objectList[id].controlFollowKeyRight = true) then begin
						if(grounded = true) then begin 
							moveDir := @UP_RIGHT;
							objectList[id].controlFollowKeyRight := false;
						end;
					end;
				end; 
			end;
			
			if(moveDir = $FF) then begin
				colObj := GetObjArea(id, objectList[id].transZ, 1, @COMP_COLLIDE_ABLE_0,0, false);
				eraseObj := GetObjArea(id, objectList[id].transZ, 1, @COMP_ERASE_ABLE_0,0, false);
				
				if((colObj = $FF or eraseObj <> $FF) and (objectList[id].b_controlPressUp = true and grounded = true)) then begin 
					objectList[id].controlState := @CTRL_STATE_JUMP;
					objectList[id].controlJumpStep := 0;
					objectList[id].b_physFallDown := false; 
				end;

				colObj := GetObjArea(id, objectList[id].transZ, 7, @COMP_COLLIDE_ABLE_0,0, false);
				eraseObj := GetObjArea(id, objectList[id].transZ, 7, @COMP_ERASE_ABLE_0,0, false);
				if((colObj = $FF or eraseObj <> $FF) and (objectList[id].b_controlPressDown = true and grounded = true)) then begin 
					moveDir := @DOWN;
				end;
			end; 
		end;
		// TODO: Stand animation
    end
    else if(objectList[id].controlState = @CTRL_STATE_JUMP) then begin
	    if(objectList[id].controlJumpStep = 0) then moveDir := @UP			// TODO: check for collideable?
	    else if(objectList[id].controlJumpStep = 1 or objectList[id].controlJumpStep = 2) then begin
			colObj := GetObjArea(id, objectList[id].transZ, 3, @COMP_DESTROY_COLLIDE_0,0, false);
			if((colObj <> $FF and objectList[id].b_controlPressLeft = true)) then DamageCollide(colObj);
			
			colObj := GetObjArea(id, objectList[id].transZ, 5, @COMP_DESTROY_COLLIDE_0,0, false);
			if((colObj <> $FF and objectList[id].b_controlPressRight = true)) then DamageCollide(colObj);

		    	colObj := GetObjArea(id, objectList[id].transZ, 3, @COMP_COLLIDE_ABLE_0,0, false);
			eraseObj := GetObjArea(id, objectList[id].transZ, 3, @COMP_ERASE_ABLE_0,0, false);
			if((colObj = $FF or eraseObj <> $FF) and (objectList[id].b_controlPressLeft = true)) then moveDir := @LEFT;  //TODO: AnimationWalkL
		
			colObj := GetObjArea(id, objectList[id].transZ, 5, @COMP_COLLIDE_ABLE_0,0, false);
			eraseObj := GetObjArea(id, objectList[id].transZ, 5, @COMP_ERASE_ABLE_0,0, false);
			if((colObj = $FF or eraseObj <> $FF) and (objectList[id].b_controlPressRight = true)) then moveDir := @RIGHT;  //TODO: AnimationWalkR


			if(moveDir = $FF) then begin
				colObj := GetObjArea(id, objectList[id].transZ, 1, @COMP_COLLIDE_ABLE_0,0, false);
				eraseObj := GetObjArea(id, objectList[id].transZ, 1, @COMP_ERASE_ABLE_0,0, false);
				colObj2 := GetObjArea(id, objectList[id].transZ, 0, @COMP_COLLIDE_ABLE_0,0, false);
				eraseObj2 := GetObjArea(id, objectList[id].transZ, 0, @COMP_ERASE_ABLE_0,0, false);
				if((colObj = $FF or eraseObj <> $FF) and (colObj2 = $FF or eraseObj2 <> $FF)) then begin
					if(objectList[id].b_controlPressLeft = true) then begin
						moveDir := @UP_LEFT;
					end;
				end; 
				colObj := GetObjArea(id, objectList[id].transZ, 1, @COMP_COLLIDE_ABLE_0,0, false);
				eraseObj := GetObjArea(id, objectList[id].transZ, 1, @COMP_ERASE_ABLE_0,0, false);
				colObj2 := GetObjArea(id, objectList[id].transZ, 2, @COMP_COLLIDE_ABLE_0,0, false);
				eraseObj2 := GetObjArea(id, objectList[id].transZ, 2, @COMP_ERASE_ABLE_0,0, false);
				if((colObj = $FF or eraseObj <> $FF) and (colObj2 = $FF or eraseObj2 <> $FF)) then begin
					if(objectList[id].b_controlPressRight = true) then begin
						moveDir := @UP_RIGHT;
					end;
				end; 
			end;
	    end;
	    inc(objectList[id].controlJumpStep);
		if(objectList[id].controlJumpStep >= 3) then begin 
			objectList[id].controlState := @CTRL_STATE_WALK;
			objectList[id].b_physFallDown := true;
		end
	end 
	else if((objectList[id].controlState = @CTRL_STATE_SWIM or objectList[id].controlState = @CTRL_STATE_CLIMB) or objectList[id].controlState = @CTRL_STATE_ROBE) then begin
		colObj := GetObjArea(id, objectList[id].transZ, 3, @COMP_DESTROY_COLLIDE_0,0, false);
		if(colObj <> $FF and objectList[id].b_controlPressLeft = true) then DamageCollide(colObj);
		
		colObj := GetObjArea(id, objectList[id].transZ, 5, @COMP_DESTROY_COLLIDE_0,0, false);
		if(colObj <> $FF and objectList[id].b_controlPressRight = true) then DamageCollide(colObj);
		
		colObj := GetObjArea(id, objectList[id].transZ, 1, @COMP_DESTROY_COLLIDE_0,0, false);
		if(colObj <> $FF and objectList[id].b_controlPressUp = true) then DamageCollide(colObj);

		colObj := GetObjArea(id, objectList[id].transZ, 7, @COMP_DESTROY_COLLIDE_0,0, false);
		if(colObj <> $FF and objectList[id].b_controlPressDown = true) then DamageCollide(colObj);
		
		colObj := GetObjArea(id, objectList[id].transZ, 3, @COMP_COLLIDE_ABLE_0,0, false);
		eraseObj := GetObjArea(id, objectList[id].transZ, 3, @COMP_ERASE_ABLE_0,0, false);
		if((colObj = $FF or eraseObj <> $FF) and objectList[id].b_controlPressLeft) then moveDir := @LEFT;  //TODO: AnimationSwimL

		colObj := GetObjArea(id, objectList[id].transZ, 5, @COMP_COLLIDE_ABLE_0,0, false);
		eraseObj := GetObjArea(id, objectList[id].transZ, 5, @COMP_ERASE_ABLE_0,0, false);
		if((colObj = $FF or eraseObj <> $FF) and objectList[id].b_controlPressRight) then moveDir := @RIGHT;  //TODO: AnimationSwimR

		colObj := GetObjArea(id, objectList[id].transZ, 1, @COMP_COLLIDE_ABLE_0,0, false);
		eraseObj := GetObjArea(id, objectList[id].transZ, 1, @COMP_ERASE_ABLE_0,0, false);
		if((colObj = $FF or eraseObj <> $FF) and (objectList[id].b_controlPressUp and objectList[id].controlState <> @CTRL_STATE_ROBE)) then moveDir := @UP;  //TODO: AnimationSwimR
		
		colObj := GetObjArea(id, objectList[id].transZ, 7, @COMP_COLLIDE_ABLE_0,0, false);
		eraseObj := GetObjArea(id, objectList[id].transZ, 7, @COMP_ERASE_ABLE_0,0, false);
		if((colObj = $FF or eraseObj <> $FF) and objectList[id].b_controlPressDown) then moveDir := @DOWN;

	end
	else if(objectList[id].controlState = @CTRL_STATE_ROBE) then begin
		colObj := GetObjArea(id, objectList[id].transZ, 3, @COMP_DESTROY_COLLIDE_0,0, false);
		if(colObj <> $FF and objectList[id].b_controlPressLeft = true) then DamageCollide(colObj);
		
		colObj := GetObjArea(id, objectList[id].transZ, 5, @COMP_DESTROY_COLLIDE_0,0, false);
		if(colObj <> $FF and objectList[id].b_controlPressRight = true) then DamageCollide(colObj);
		
		colObj := GetObjArea(id, objectList[id].transZ, 1, @COMP_DESTROY_COLLIDE_0,0, false);
		if(colObj <> $FF and objectList[id].b_controlPressUp = true) then DamageCollide(colObj);

		colObj := GetObjArea(id, objectList[id].transZ, 7, @COMP_DESTROY_COLLIDE_0,0, false);
		if(colObj <> $FF and objectList[id].b_controlPressDown = true) then DamageCollide(colObj);
		
		colObj := GetObjArea(id, objectList[id].transZ, 3, @COMP_COLLIDE_ABLE_0,0, false);
		eraseObj := GetObjArea(id, objectList[id].transZ, 3, @COMP_ERASE_ABLE_0,0, false);
		if((colObj = $FF or eraseObj <> $FF) and objectList[id].b_controlPressLeft) then moveDir := @LEFT;  //TODO: AnimationSwimL
		
	end;
	
	// Do Moves
	oldx := objectList[id].transX;
	oldy := objectList[id].transY;
	
	if(moveDir = @LEFT) then begin
		eraseObj := GetObjArea(id, objectList[id].transZ, 3, @COMP_ERASE_ABLE_0,0, false);
		if(eraseObj <> $FF) then DeletePos(eraseObj, false, false);
		shift := ConvertShift(gravity, 3);
		newx := CalcPositionX(oldx, Hi(shift));
		newy := CalcPositionY(oldy, Lo(shift));
		if(objectList[id].animFinish = true) then begin
			objectList[id].animId := @ANIM_WALK_L;
			objectList[id].animPos := 0;
			objectList[id].animFinish := false;
		end;
	end
	else if(moveDir = @RIGHT) then begin
		eraseObj := GetObjArea(id, objectList[id].transZ, 5, @COMP_ERASE_ABLE_0,0, false);
		if(eraseObj <> $FF) then DeletePos(eraseObj, false, false);
		shift := ConvertShift(gravity, 5);
		newx := CalcPositionX(oldx, Hi(shift));
		newy := CalcPositionY(oldy, Lo(shift));
	end
	else if(moveDir = @UP_LEFT) then begin
		eraseObj := GetObjArea(id, objectList[id].transZ, 0, @COMP_ERASE_ABLE_0,0, false);
		eraseObj2 := GetObjArea(id, objectList[id].transZ, 3, @COMP_ERASE_ABLE_0,0, false);
		if(eraseObj <> $FF) then DeletePos(eraseObj, false, false);
		if(eraseObj2 <> $FF) then DeletePos(eraseObj2, false, false);
		shift := ConvertShift(gravity, 0);
		newx := CalcPositionX(oldx, Hi(shift));
		newy := CalcPositionY(oldy, Lo(shift));
	end
	else if(moveDir = @UP_RIGHT) then begin
		eraseObj := GetObjArea(id, objectList[id].transZ, 2, @COMP_ERASE_ABLE_0,0, false);
		eraseObj2 := GetObjArea(id, objectList[id].transZ, 5, @COMP_ERASE_ABLE_0,0, false);
		if(eraseObj <> $FF) then DeletePos(eraseObj, false, false);
		if(eraseObj2 <> $FF) then DeletePos(eraseObj2, false, false);
		shift := ConvertShift(gravity, 2);
		newx := CalcPositionX(oldx, Hi(shift));
		newy := CalcPositionY(oldy, Lo(shift));
	end
	else if(moveDir = @UP) then begin
		eraseObj := GetObjArea(id, objectList[id].transZ, 1, @COMP_ERASE_ABLE_0,0, false);
		if(eraseObj <> $FF) then DeletePos(eraseObj, false, false);
		shift := ConvertShift(gravity, 1);
		newx := CalcPositionX(oldx, Hi(shift));
		newy := CalcPositionY(oldy, Lo(shift));
	end
	else if(moveDir = @DOWN) then begin
		eraseObj := GetObjArea(id, objectList[id].transZ, 7, @COMP_ERASE_ABLE_0,0, false);
		if(eraseObj <> $FF) then DeletePos(eraseObj, false, false);
		shift := ConvertShift(gravity, 7);
		newx := CalcPositionX(oldx, Hi(shift));
		newy := CalcPositionY(oldy, Lo(shift));
	end;
	if(newx <> $FF) then SetPos(id,oldx, oldy, newx, newy, objectList[id].transZ);
end;

