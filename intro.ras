program intro;

//@define DISK_VERSION 1

@ifndef DISK_VERSION
	@setvalue "remove_unused_symbols" "0"
	@setvalue "exomizer_toggle" 0
	@projectsettings "exomize" "0"
	@projectsettings "ignorebasicsysstart" 1
	@projectsettings "startaddress" $0900	
@endif


@setvalue "exomizer_toggle" 0
@setvalue "remove_unused_symbols" "0"
@ifndef IS_DEMO
	@setvalue "output_type" "prg"
@endif

// @use "demounit"
@use "tables/luminosities"
@use "screen/fadeinout"
@use "screen/screen"

var  
	@perlinnoise "title/per1.bin" 40 25 2 1 1  170 140
	fadedata : incbin("title/per1.bin",$C000);
	@export "title/title2.flf" "title/title2.bin" 256
	@export "title/kalogo.flf" "title/kalogo.bin" 256
	i,j: byte;
	exit: boolean;
	ready: boolean;
	img_data:incbin("title/title2_data.bin", $a000);
	img_col : incbin("title/title2_color.bin");
	img_data2:incbin("title/kalogo_data.bin", $6000);
	img_col2 : incbin("title/kalogo_color.bin");
	levStringsHead: Array[3] of string = ("LEVELSET:","AUTHOR:","NOTES:");
@ifndef IS_DEMO
	music: incsid("music/fizz_intro_2000.sid",2);
@endif

@startblock $5000 "levelset"
	maxSingleLevels: byte = 40;
	maxMultiLevels: byte = 30;
	levStrings: Array[5] of string = ("<TITLE>","<AUTHOR>","<N1>","<N2>","<N3>");
@endblock
@startblock $3000 "code"

procedure InitLevelSetInfo();
var 
	levStr: string;
begin
	levStr := "L";
	screen_bg_col:=black;
	screen_fg_col:=black;
	clearscreen(0,^$0400);	
	clearscreen(0,^$D800);
@ifdef IS_DEMO 
			asm(
"
	ldx #<localVariable_InitLevelSetInfo_levStr
	ldy #>localVariable_InitLevelSetInfo_levStr
	jsr $200
");
@endif
	//poke(^53272,0,23);
//	Screen::PrintStringColor(levStringsHead[0],0,0,@WHITE);
//	Screen::PrintStringColor(levStringsHead[1],0,1,@WHITE);
//	Screen::PrintStringColor(levStringsHead[2],0,3,@WHITE);
//	Screen::PrintStringColor(levStrings[0],11,0,@WHITE);
//	Screen::PrintStringColor(levStrings[1],11,1,@WHITE);
//	Screen::PrintStringColor(levStrings[2],0,3,@WHITE);
//	Screen::PrintStringColor(levStrings[3],0,4,@WHITE);
//	Screen::PrintStringColor(levStrings[4],0,5,@WHITE);
//	exit := false;
//	i := 0;
//	j := 0;
//	while(exit = false and j < 255) do begin
//		inc(i);
//		if(i = 255) then inc(j);
//		ReadJoy2();
//		if(getkey() = KEY_SPACE) then exit := true;
//		if(joy2 & JOY_FIRE = JOY_FIRE) then exit := true;
//	end;
	
	poke(^$08FD,0,maxSingleLevels);
	poke(^$08FE,0,maxMultiLevels);
end;


procedure InitTitle();
begin
	setmulticolormode();
	setbitmapmode();
	setcharsetandscreenlocation($a000,$8400);
	setbank(VIC_BANK2);
	copyimagecolordata(#img_col,2);	

	screen_bg_col:=black;
	screen_fg_col:=black;
	clearscreen(0,^$8400);	
	clearscreen(0,^$D800);		
end;

procedure InitLogo();
begin
	setmulticolormode();
	setbitmapmode();
	setcharsetandscreenlocation($6000,$4400);
	setbank(VIC_BANK1);
	copyimagecolordata(#img_col2,1);	

	screen_bg_col:=black;
	screen_fg_col:=black;
	clearscreen(0,^$4400);	
	clearscreen(0,^$D800);		
end;


interrupt RasterMain();
begin
	startirq(0);
//	setmulticolormode();
//	setbitmapmode();
//	setcharsetandscreenlocation($a000,$8400);
//	setbank(VIC_BANK1);

	call(^$2003);
	ReadJoy2();
	//if(joy2 & JOY_FIRE = JOY_FIRE and ready = true) then exit := true;
	if(getkey() = KEY_SPACE and ready = true) then exit := true;
	closeIrq();

end;

@endblock

procedure Transfer();
begin	
	asm("	
	;--- write your code to switch off interrupts and sid here ---
	lda #$ea
	sta $0315
	lda #$31
	sta $0314
	lda #$81
	sta $dc0d
	lda #0
	sta $d01a
	inc $d019
	lda $dc0d
	;Copy relocator code to memory $0200
	ldx #$00
reloccodecopy:
	lda reloccode,x
	sta $0100,x
	inx
	bne reloccodecopy
	lda #0
	sta $0800
	;cli
	jmp $0100 ;Jump to self-modified relocator code
	
reloccode:
	sei
	lda #$34 ;If your program goes over $d000, else use '#$35 instead
	sta $01
relocate1:  
	ldx #$00
relocate2: 
	lda $7000,x ;Target address to read from
	sta $0801,x ;Transfer to BASIC load address $0801 - ALWAYS!
	inx
	bne relocate2
	inc $0109 ;Self-mode changing in relocated transfer code
	inc $010c ;
	lda $0109 ;Check if hi-byte of target address has expired $ffff
	bne relocate1
	lda #$37 ;Restore kernal-
	sta $01
	jmp $080d ;Run Exomizer decruncher from BASIC load address
	cli");
end;


// This effect starts at $0900!	
begin
	// Executed in stand-alone
	@ifndef IS_DEMO 
		disableciainterrupts();
		preventirq();
		setmemoryconfig(1,0,0);
		maxSingleLevels := 48;
		maxMultiLevels := 30;
	@endif
	InitSid(^$2000);
	InitLevelSetInfo();
	StartRasterChain(RasterMain(), 0, 0); // Don't use kernal
	
	InitLogo();
	// Loop();
	ready := false;
	exit := false;
	FadeInOut::InitCols(#Luminosities::fromBlue);
	FadeInOut::DefaultFadeIn(#img_col2,$4400,#fadedata,2);	
	
	ready := true;
	
	while(exit = false) do begin end;
	setmulticolormode();
	setbitmapmode();
	setcharsetandscreenlocation($6000,$4400);
	setbank(VIC_BANK1);
	
	FadeInOut::DefaultFadeOut(#img_col2,$4400,#fadedata,2);	

	
	InitTitle();
	// Loop();
	ready := false;
	exit := false;
	FadeInOut::InitCols(#Luminosities::fromBlue);
	FadeInOut::DefaultFadeIn(#img_col,$8400,#fadedata,2);	
	
	ready := true;
	
	while(exit = false) do begin end;
	setmulticolormode();
	setbitmapmode();
	setcharsetandscreenlocation($a000,$8400);
	setbank(VIC_BANK2);

	FadeInOut::DefaultFadeOut(#img_col,$8400,#fadedata,2);	
	asm("
		jmp $0810
	");


	@ifdef IS_DEMO 
	asm("
		jmp @bootStartAddress
	");
	@endif
	@ifdef DISK_VERSION 
	asm("
		jmp @bootStartAddress
	");
	@endif
	@ifndef DISK_VERSION
	preventirq();
	disableciainterrupts();
	setmemoryconfig(1,1,1);

	Transfer();
	
	Loop();
	
	@endif
	Loop();
end.